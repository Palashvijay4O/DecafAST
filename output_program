Success
<program>
	<field_declarations count="3">
		<field_declaration type="integer">
			<declaration name="x" count="7" />
			<declaration name="i" />
			<declaration name="y" />
			<declaration name="z" />
		</field_declaration>
		<field_declaration type="boolean">
			<declaration name="de" />
			<declaration name="v" count="9" />
		</field_declaration>
		<field_declaration type="integer">
			<declaration name="dp" count="10" />
		</field_declaration>
	</field_declarations>
	<method_declarations count="3">
		<method_declaration type="integer" id="foo">
			<arguments count="3">
				<argument id="x" type="integer" />
				<argument id="y" type="boolean" />
				<argument id="z" type="integer" />
			</arguments>
			<block>
				<var_declarations count="1">
					<var_declaration type="integer">
						<id="a" />
						<id="b" />
						<id="c" />
					</var_declaration>
				</var_declarations>
				<statements cout="8">
					<assignment_statement>
						<location>
							<var_location id="d" />
						</location>
						<operator="equal" />
						<expression>
							<literal type="integer" value="5" />
						</expression>
					</assignment_statement>
					<assignment_statement>
						<location>
							<var_location id="hello" />
						</location>
						<operator="equal" />
						<expression>
							<binary_expression arithematic_operation="addition">
								<left_hand_expression>
									<var_location id="fo" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="character" value="a" />
								</right_hand_expression>
						</expression>
					</assignment_statement>
					<method_call name="foo">
						<arguments count="4">
							<binary_expression arithematic_operation="addition">
								<left_hand_expression>
									<var_location id="d" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="character" value="5" />
								</right_hand_expression>
							<var_location id="bonda" />
							<binary_expression arithematic_operation="addition">
								<left_hand_expression>
									<literal type="integer" value="4" />
								</left_hand_expression>
								<right_hand_expression>
									<binary_expression arithematic_operation="multiply">
										<left_hand_expression>
											<literal type="integer" value="6" />
										</left_hand_expression>
										<right_hand_expression>
											<literal type="integer" value="0" />
										</right_hand_expression>
								</right_hand_expression>
							<method_call name="foo">
								<arguments count="2">
									<literal type="integer" value="10" />
									<literal type="integer" value="15" />
								</arguments>
							</method_call>
						</arguments>
					</method_call>
					<callout name="bonda" >
						<arguments size="1" >
							<binary_expression arithematic_operation="addition">
								<left_hand_expression>
									<var_location id="d" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="integer" value="5" />
								</right_hand_expression>
						</arguments>
					</callout>
					<if>
						<condition>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<var_location id="x" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="integer" value="5" />
								</right_hand_expression>
						</condition>
						<body>
							<var_declarations count="1">
								<var_declaration type="integer">
									<id="a" />
								</var_declaration>
							</var_declarations>
							<statements cout="2">
								<assignment_statement>
									<location>
										<var_location id="d" />
									</location>
									<operator="equal" />
									<expression>
										<literal type="integer" value="5" />
									</expression>
								</assignment_statement>
								<continue encountered />
							</statements>
						</body>
					</if>
					<if_else>
						<condition>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<array_location id="d">
										<size_expression/>
											<literal type="integer" value="5" />
										</size_expression>
									</array_location>
								</left_hand_expression>
								<right_hand_expression>
									<literal type="integer" value="5" />
								</right_hand_expression>
						</condition>
						<if_body>
							<var_declarations count="0">
							</var_declarations>
							<statements cout="1">
								<assignment_statement>
									<location>
										<array_location id="foo">
											<size_expression/>
												<literal type="integer" value="10" />
											</size_expression>
										</array_location>
									</location>
									<operator="plus_equal" />
									<expression>
										<literal type="integer" value="10" />
									</expression>
								</assignment_statement>
							</statements>
						</if_body>
						<else_body>
							<var_declarations count="1">
								<var_declaration type="integer">
									<id="foo" />
								</var_declaration>
							</var_declarations>
							<statements cout="1">
								<method_call name="foo">
									<arguments count="2">
										<binary_expression arithematic_operation="modulus">
											<left_hand_expression>
												<var_location id="d" />
											</left_hand_expression>
											<right_hand_expression>
												<literal type="integer" value="5" />
											</right_hand_expression>
										<binary_expression arithematic_operation="modulus">
											<left_hand_expression>
												<var_location id="f" />
											</left_hand_expression>
											<right_hand_expression>
												<literal type="integer" value="6" />
											</right_hand_expression>
									</arguments>
								</method_call>
							</statements>
						</else_body>
					</if_else>
					<for name="i" >
						<expression_1>
							<literal type="integer" value="0" />
						</expression_1>
						<expression_2>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<var_location id="i" />
								</left_hand_expression>
								<right_hand_expression>
									<callout name="sort" >
										<arguments size="3" >
											<literal type="integer" value="1" />
											<literal type="integer" value="2" />
											<literal type="integer" value="3" />
										</arguments>
									</callout>
								</right_hand_expression>
						</expression_2>
						<block>
							<var_declarations count="1">
								<var_declaration type="integer">
									<id="a" />
								</var_declaration>
							</var_declarations>
							<statements cout="5">
								<assignment_statement>
									<location>
										<var_location id="d" />
									</location>
									<operator="equal" />
									<expression>
										<literal type="integer" value="5" />
									</expression>
								</assignment_statement>
								<break encountered />
								<assignment_statement>
									<location>
										<var_location id="i" />
									</location>
									<operator="plus_equal" />
									<expression>
										<literal type="integer" value="1" />
									</expression>
								</assignment_statement>
								<assignment_statement>
									<location>
										<array_location id="d">
											<size_expression/>
												<binary_expression arithematic_operation="modulus">
													<left_hand_expression>
														<binary_expression arithematic_operation="division">
															<left_hand_expression>
																<literal type="integer" value="25" />
															</left_hand_expression>
															<right_hand_expression>
																<literal type="integer" value="2" />
															</right_hand_expression>
													</left_hand_expression>
													<right_hand_expression>
														<literal type="integer" value="9" />
													</right_hand_expression>
											</size_expression>
										</array_location>
									</location>
									<operator="equal" />
									<expression>
										<binary_expression arithematic_operation="modulus">
											<left_hand_expression>
												<literal type="integer" value="5" />
											</left_hand_expression>
											<right_hand_expression>
												<binary_expression arithematic_operation="modulus">
													<left_hand_expression>
														<literal type="integer" value="4" />
													</left_hand_expression>
													<right_hand_expression>
														<unary_minus>
															<literal type="integer" value="9" />
														</unary_minus>
													</right_hand_expression>
											</right_hand_expression>
									</expression>
								</assignment_statement>
								<method_call name="foo">
									<arguments count="2">
										<unary_not>
											<literal type="integer" value="1" />
										</unary_not>
										<binary_expression arithematic_operation="addition">
											<left_hand_expression>
												<literal type="integer" value="2" />
											</left_hand_expression>
											<right_hand_expression>
												<literal type="integer" value="3" />
											</right_hand_expression>
									</arguments>
								</method_call>
							</statements>
						</block>
					</for>
					<return>
						<literal type="integer" value="5" />
					</return>
				</statements>
			</block>
		</method_declaration>
		<method_declaration type="void" id="fib">
			<arguments count="1">
				<argument id="n" type="integer" />
			</arguments>
			<block>
				<var_declarations count="0">
				</var_declarations>
				<statements cout="2">
					<if>
						<condition>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<var_location id="n" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="integer" value="0" />
								</right_hand_expression>
						</condition>
						<body>
							<var_declarations count="0">
							</var_declarations>
							<statements cout="1">
								<return>
								</return>
							</statements>
						</body>
					</if>
					<if_else>
						<condition>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<array_location id="dp">
										<size_expression/>
											<var_location id="n" />
										</size_expression>
									</array_location>
								</left_hand_expression>
								<right_hand_expression>
									<unary_minus>
										<literal type="integer" value="1" />
									</unary_minus>
								</right_hand_expression>
						</condition>
						<if_body>
							<var_declarations count="0">
							</var_declarations>
							<statements cout="1">
								<return>
								</return>
							</statements>
						</if_body>
						<else_body>
							<var_declarations count="0">
							</var_declarations>
							<statements cout="4">
								<method_call name="fib">
									<arguments count="1">
										<binary_expression arithematic_operation="subtraction">
											<left_hand_expression>
												<var_location id="n" />
											</left_hand_expression>
											<right_hand_expression>
												<literal type="integer" value="1" />
											</right_hand_expression>
									</arguments>
								</method_call>
								<callout name="fib" >
									<arguments size="1" >
										<binary_expression arithematic_operation="subtraction">
											<left_hand_expression>
												<var_location id="n" />
											</left_hand_expression>
											<right_hand_expression>
												<literal type="integer" value="2" />
											</right_hand_expression>
									</arguments>
								</callout>
								<assignment_statement>
									<location>
										<array_location id="dp">
											<size_expression/>
												<var_location id="n" />
											</size_expression>
										</array_location>
									</location>
									<operator="equal" />
									<expression>
										<binary_expression arithematic_operation="addition">
											<left_hand_expression>
												<array_location id="dp">
													<size_expression/>
														<binary_expression arithematic_operation="subtraction">
															<left_hand_expression>
																<var_location id="n" />
															</left_hand_expression>
															<right_hand_expression>
																<literal type="integer" value="1" />
															</right_hand_expression>
													</size_expression>
												</array_location>
											</left_hand_expression>
											<right_hand_expression>
												<array_location id="dp">
													<size_expression/>
														<binary_expression arithematic_operation="subtraction">
															<left_hand_expression>
																<var_location id="n" />
															</left_hand_expression>
															<right_hand_expression>
																<literal type="integer" value="2" />
															</right_hand_expression>
													</size_expression>
												</array_location>
											</right_hand_expression>
									</expression>
								</assignment_statement>
								<return>
								</return>
							</statements>
						</else_body>
					</if_else>
				</statements>
			</block>
		</method_declaration>
		<method_declaration type="integer" id="gcd">
			<arguments count="2">
				<argument id="a" type="integer" />
				<argument id="b" type="integer" />
			</arguments>
			<block>
				<var_declarations count="0">
				</var_declarations>
				<statements cout="2">
					<if>
						<condition>
							<binary_expression arithematic_operation="modulus">
								<left_hand_expression>
									<var_location id="b" />
								</left_hand_expression>
								<right_hand_expression>
									<literal type="integer" value="0" />
								</right_hand_expression>
						</condition>
						<body>
							<var_declarations count="0">
							</var_declarations>
							<statements cout="1">
								<return>
									<var_location id="a" />
								</return>
							</statements>
						</body>
					</if>
					<return>
						<method_call name="gcd">
							<arguments count="2">
								<var_location id="b" />
								<binary_expression arithematic_operation="modulus">
									<left_hand_expression>
										<var_location id="a" />
									</left_hand_expression>
									<right_hand_expression>
										<var_location id="b" />
									</right_hand_expression>
							</arguments>
						</method_call>
					</return>
				</statements>
			</block>
		</method_declaration>
	</method_declarations>
</program>
